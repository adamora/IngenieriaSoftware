/*
 * SGDBFichero.h
 *
 *  Created on: 21 de ago. de 2015
 *      Author: adam
 */

#ifndef SGDBFICHERO_H_
#define SGDBFICHERO_H_

#include <string>
#include <list>
#include <fstream>
#include <cstring>
#include <iostream>
#include <algorithm>


#include "SGDB.h"


using namespace std;

namespace Dentista{

class SGDBFichero:public SGDB{

	private:

		string _fichero;

	public:
		SGDBFichero() throw() {}

		SGDBFichero(string fichero) throw ()
		{
			_fichero=fichero;
		}

		virtual ~SGDBFichero(){};

		void setFichero(string f)
		{
			_fichero = f;
		}

		inline string getFichero() const
		{
			return _fichero;
		}

		inline void guardar(Agenda& agenda){
			int i;
			string fichAux="FichAux.tmp";
			ofstream fich(fichAux.c_str(),ios::out);

			//fich.open(fichAux.c_str(),ios::out);

			//Contacto* agenda = agenda.getPacientes();

			//Contacto personaAux;

			for(i=0;i<agenda.getNumPacientes();i++)
			{
				/*personaAux = agenda[i];
				fich.write((char *) (&personaAux), sizeof(Contacto));*/
				fich << agenda[i].getNombre() << endl << agenda[i].getApellidos() << endl << agenda[i].getDNI() << endl << agenda[i].getTel1() << endl << agenda[i].getTel2() << endl << agenda[i].getCorreo1() << endl << agenda[i].getCorreo2() << endl << agenda[i].getFavorito() << endl << agenda[i].getAnotaciones() << endl << agenda[i].getContadorAcceso() << endl;
				for(int j=0;j<agenda[i].getNumRedes();j++)
				{
					if(j!=agenda[i].getNumRedes()-1)
					{
						fich << agenda[i].getRedSocial(j).getNombreRed() << "," << agenda[i].getRedSocial(j).getUsuario() << ";";
					}
					else
					{
						fich << agenda[i].getRedSocial(j).getNombreRed() << "," << agenda[i].getRedSocial(j).getUsuario() << endl;
					}
				}

			}
			fich << endl;
			/*for(i=0;i<agenda.getNumPacientes();i++)
			{
				fich << agenda[i].getNombre() << agenda[i].getApellidos() << agenda[i].getDNI() << agenda[i].getTel1() << agenda[i].getTel2() << agenda[i].getCorreo1() << agenda[i].getCorreo2() << agenda[i].getFavoragendao() << agenda[i].getAnotaciones() << agenda[i].getContadorAcceso();
			}*/

			fich.close();

			remove(_fichero.c_str());
			rename(fichAux.c_str(), _fichero.c_str());
		}

		inline Agenda& cargar(){
			Contacto aux;
			int contador = 0;
			Agenda agAux;

			ifstream fich(this->getFichero().c_str(), ios::in);

			//fich.read((char *) (&aux), sizeof(Contacto));


			string nombre,apellidos,DNI,Correo1,Correo2,Anotaciones;
			string Tel1, Tel2,ContadorAcceso;
			string Favorito;
			string redes;


			while(!fich.eof())
			{
				//fich >> nombre >> apellidos >> DNI >> Tel1 >> Tel2 >> Correo1 >> Correo2 >> Favorito >> Anotaciones >> ContadorAcceso ;
				getline(fich, nombre);
				getline(fich, apellidos);
				getline(fich, DNI);
				getline(fich, Tel1);
				getline(fich, Tel2);
				getline(fich, Correo1);
				getline(fich, Correo2);
				getline(fich, Favorito);
				getline(fich, Anotaciones);
				getline(fich, ContadorAcceso);
				getline(fich, redes);



				aux.setNombre(nombre);
				aux.setApellidos(apellidos);
				aux.setDNI(DNI);
				aux.setTel1(atoi(Tel1.c_str()));
				aux.setTel2(atoi(Tel2.c_str()));
				aux.setCorreo1(Correo1);
				aux.setCorreo2(Correo2);
				aux.setFavorito(atoi(Favorito.c_str()));
				aux.setAnotaciones(Anotaciones);
				aux.setContadorAcceso(atoi(ContadorAcceso.c_str()));

				//prueba
				string delimiter = ",";
				string delimiterF = ";";

				size_t pos=0;
				string token;
				string token2;
				RedSocial red;

				cout << "ENTRA";

				while((pos = redes.find(delimiterF)) != string::npos)
				{cout << "ENTRA";
				    token = redes.substr(0, pos);
				    redes.erase(0, pos + delimiterF.length());
					while((pos = redes.find(delimiter)) != string::npos)
					{
						token2 = token.substr(0, pos);
						//cout << token << endl;
						red.setNombreRed(token2);
						token.erase(0, pos + delimiter.length());
					}
					//cout << token << endl;
					red.setUsuario(token);
					aux.insertarRedSocial(red);
				}
				//posible
				while((pos = redes.find(delimiter)) != string::npos)
				{
					token2 = token.substr(0, pos);
					//cout << token << endl;
					red.setNombreRed(token2);
					token.erase(0, pos + delimiter.length());
				}
				red.setUsuario(token);
				aux.insertarRedSocial(red);
				//finPrueba

				agAux.insertarPaciente(aux);
				//fich.read((char*) (&aux), sizeof(Contacto));
				contador++;
			}

			//cout << "EL NOMBRE ES: " << aux.getNombre();
			fich.close();

			agAux.setNumPacientes(contador-1);

			return agAux;
		}

};

}


#endif /* SGDBFICHERO_H_ */
